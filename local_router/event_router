#!/usr/bin/env node

// vim: set syntax=javascript:

var util=require('util');
var child_process=require('child_process');
var fs=require('fs');
var path=require('path');

var DEBUG=false;

// define output stream
if (process.argv.length != 6) {
	console.log("Error: Usage is: "+process.argv[1]+" <input device> <output device> <dest MAC> <dest channel>");
	process.exit(1);
}
var input_file=process.argv[2];
var output_file=process.argv[3];
var dest_mac=process.argv[4];
var dest_channel=process.argv[5];

var output_stream=null;
var output_stream_timer=null;

var rfcomm_child=null;

function write_output_stream(buf) {
	if (!output_stream) {
		console.log("no output stream");
		if (!rfcomm_child) {
			console.log("no rfcomm child");
			rfcomm_child=child_process.spawn(
				"/usr/bin/rfcomm", [ "-r","connect", output_file, dest_mac,dest_channel],
				{
					stdio: [
						'ignore',
						'ignore',
						'pipe'
					]
				}
			).on('exit',function(code) {
				console.log("rfcomm child exited");
				if (output_stream) {
					output_stream.end();
					output_stream=null;
				}
				rfcomm_child=null;
				if (output_stream_timer) {
					clearInterval(output_stream_timer);
					output_stream_timer=null;
				}
			});
			rfcomm_child.stderr.on('data',function(data) {
				console.log("Error: rfcomm error: "+data);
			});
		}
		else {
			console.log("rfcomm child is present");
		}
		
		if (output_stream_timer) {
			console.log("Timer already set");
			return;
		}
		
		output_stream_timer=setInterval(function() {
			console.log("Try open output file");
			if (output_stream) {
				clearInterval(output_stream_timer);
				output_stream_timer=null;
				console.log("output sream was opened");
				return;	
			}
				
			try {
				if (!fs.statSync(output_file).isCharacterDevice()) {
					DEBUG && console.log("Output file is not a device");
					return;
				}
			}
			catch(e) {
				return;
			}

			console.log("Opening output stream: "+output_file);
			output_stream=fs.createWriteStream(output_file,{
				flags:'w',
				encoding: null
			}).on('finish',function() {
				console.log("Error: Output stream: closed.");
				output_stream=null;
			}).on('error',function(err) {
				console.log("Error: Output stream: "+err);
				output_stream.end();
				output_stream=null;
			}).on('open',function() {
				clearInterval(output_stream_timer);
				DEBUG && console.log("Writing first buffer");
				output_stream.write(buf);
			});
		},1000);
	}
	else {
		DEBUG && console.log("Writing buffer");
		output_stream.write(buf);
	}
}


var input_stream=null;
function read_input_stream() {
	var buffer="";
	
	DEBUG && console.log("Opening input stream "+input_file);
	input_stream=fs.createReadStream(input_file,{
		flags:'r',
		encoding: null,
		autoClose: true
	}).on('end',function() {
		console.log("Error: Input stream: closed.");
		input_stream=null;
		setTimeout(read_input_stream,1000);
	}).on('error',function(err) {
		console.log("Error: Input stream: "+err);
		input_stream.close();
		input_stream=null;
		setTimeout(read_input_stream,1000);
	}).on('data',function(data) {
		// extract lines and process value
		buffer+=data;

		while (1) {
			var eol=buffer.indexOf("\n");
			if (eol<=0)
				break;
			jsonstr=buffer.substring(0,eol);
			buffer=buffer.substring(eol+1)
			DEBUG && console.log("Event: "+jsonstr);
			try {
				var evt=JSON.parse(jsonstr);
				display_event(evt);
				forward_event(evt);
			}
			catch(e) {
				console.log("Error: invalid JSON: "+e);
			}
		}
	});
}

var displayer;
function write_displayer(msg) {
	if (!displayer) {
		console.log("Forking new displayer");
		displayer=child_process.spawn(
			"/usr/bin/fbcat", ["/dev/fb1"],
			{
				stdio: [
					'pipe',
					'ignore',
					'pipe'
				]
			}
		).on('exit',function(code) {
			displayer=null;
		});
		displayer.stderr.on('data',function(data) {
			console.log("Error: displayer error: "+data);
		});
		
		console.log("Forked displayer as pid "+displayer.pid);
		setTimeout(function() { if (displayer) displayer.stdin.write(msg+'<br>\n'); }, 300);
	}
	else {
		displayer.stdin.write(msg+'<br>\n');
	}
}

var MESSAGES={
	"CRASH":	"<font color=#FF0000 font_size=170><b>CRASH !</b></font>",
	"ALERT":	"<font color=#FF8000 font_size=170><b>ALERT !</b></font>",
	"WARNING":	"<font color=#FFFF00 font_size=140><b>WARNING</b></font>",
	"OK":		"<font color=#00FF00 font_size=300><b>OK</b></font>"
};

function display_event(evt) {
/*	write_displayer(
		(MESSAGES[evt.state] || MESSAGES.OK)
	);
*/
	child_process.spawn(
		path.join(__dirname,"fbdump"),[
			path.join(__dirname,"images",evt.state)
		],
		{ stdio: 'ignore' }
	);
}

function forward_event(evt) {
	console.log("Forwarding event: "+JSON.stringify(evt));
	write_output_stream(JSON.stringify(evt)+"\n");
}

function main() {
	try {
		read_input_stream();
	}
	catch(e) {
		console.log("ERROR: "+e);
		console.log("--------------------- RESTART ------------------");
		setTimout(main,10);
	}
}
main();

