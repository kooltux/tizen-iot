#!/usr/bin/env node

// vim: set syntax=javascript:

var util=require('util');
var child_process=require('child_process');
var fs=require('fs');

var LIMITS=[60,45,20,0];
var LIMITS_LABELS=["CRASH","ALERT","WARNING","OK"];
var EVENT_REPEAT_MS=1000;
var DEBUG=false;

// define output stream
if (process.argv.length != 6) {
	console.log("Error: Usage is: "+process.argv[1]+" <output device> <dest MAC addr> <output channel> <blinkexe>");
	process.exit(1);
}
var output_file=process.argv[2];
var output_stream=null;
var output_stream_timer=null;

var dest_mac=process.argv[3];
var dest_channel=process.argv[4];
var rfcomm_child=null;

var blink_exe=process.argv[5];

function blinkled() {
	child_process.spawn(blink_exe,["on"],{stdio:"ignore"});
	setTimeout(function() {
		child_process.spawn(blink_exe,["off"],{stdio:"ignore"});
	},200);
}

function write_output_stream(buf) {
	if (!output_stream) {
		console.log("no output stream");
		if (!rfcomm_child) {
			console.log("no rfcomm child");
			child_process.spawn("/usr/sbin/rfkill",["unblock","all"],{stdio:'ignore'});
			rfcomm_child=child_process.spawn(
				"/usr/bin/rfcomm", [ "-r","connect", output_file, dest_mac,dest_channel],
				{
					stdio: [
						'ignore',
						'ignore',
						'pipe'
					]
				}
			).on('exit',function(code) {
				console.log("rfcomm child exited");
				if (output_stream) {
					output_stream.end();
					output_stream=null;
				}
				rfcomm_child=null;
				if (output_stream_timer) {
					clearInterval(output_stream_timer);
					output_stream_timer=null;
				}
			});
			rfcomm_child.stderr.on('data',function(data) {
				console.log("Error: rfcomm error: "+data);
			});
		}
		else {
			console.log("rfcomm child is present");
		}
		
		if (output_stream_timer) {
			console.log("Timer already set");
			return;
		}
		
		output_stream_timer=setInterval(function() {
			console.log("Try open output file");
			if (output_stream) {
				clearInterval(output_stream_timer);
				output_stream_timer=null;
				console.log("output sream was opened");
				return;	
			}
				
			try {
				if (!fs.statSync(output_file).isCharacterDevice()) {
					DEBUG && console.log("Output file is not a device");
					return;
				}
			}
			catch(e) {
				return;
			}

			console.log("Opening output stream: "+output_file);
			output_stream=fs.createWriteStream(output_file,{
				flags:'w',
				encoding: null
			}).on('finish',function() {
				console.log("Error: Output stream: closed.");
				output_stream=null;
			}).on('error',function(err) {
				console.log("Error: Output stream: "+err);
				output_stream.end();
				output_stream=null;
			}).on('open',function() {
				clearInterval(output_stream_timer);
				DEBUG && console.log("Writing first buffer");
				output_stream.write(buf);
				blinkled();
			});
		},1000);
	}
	else {
		DEBUG && console.log("Writing buffer");
		output_stream.write(buf);
		blinkled();
	}
}

var sampler_pid=0;
function restart_sampler() {
	if (sampler_pid) {
		process.kill(sampler_pid,'SIGINT');
	}
}
function fork_sampler() {
	console.log("Forking new sampler");
	var child=child_process.spawn(
		"/usr/bin/mpu9250_sample", DEBUG ? ["-d","200"] : [],
		{
			stdio: [
				'ignore',
				'pipe',
				'pipe'
			]
		}
	).on('exit',function(code) {
		setTimeout(fork_sampler,1000);
		sampler_pid=0;
	});
	sampler_pid=child.pid;

	/*
	setTimeout(function() {
		process.kill(child.pid,'SIGINT');
		console.log("Killed mpu9250");
	},30000);
	*/

	console.log("Forked sampler as pid "+child.pid);

	var buffer="";
	child.stdout.on('data',function(data) {
		// extract lines and process value
		buffer+=data;

		while (1) {
			var eol=buffer.indexOf("\n");
			if (eol<=0)
				break;
			jsonstr=buffer.substring(0,eol);
			buffer=buffer.substring(eol+1)
			//DEBUG && console.log("Sampler line: "+jsonstr);
			try {
				var sample=JSON.parse(jsonstr);
				analyze(sample);
			}
			catch(e) {
				console.log("Error: invalid JSON: "+e);
			}
		}
	});
	child.stderr.on('data',function(data) {
		console.log("Error: Sampler error: "+data);
	});
}

var last_state=0;

var ts_ref=Date.now();
function ts() {
	return Date.now() - ts_ref;
}

var last_event=ts_ref;

function analyze(sample) {
	DEBUG && console.log("Sample: "+sample.p.x+","+sample.p.y);

	var x=Math.abs(sample.p.x);
	var y=Math.abs(sample.p.y);

	var evt_sent;

	LIMITS.some(function(limit,idx) {
		if (x>limit || y>limit) {
			if (last_state != idx) {
				send_event({
					state: LIMITS_LABELS[idx],
					limit: limit,
					x: x,
					y: y,
					ts: ts()/1000.0
				});
				last_state=idx;
				evt_sent=true;
			}
			return true;
		}
	});

	if (!evt_sent && ((ts() - last_event) > EVENT_REPEAT_MS)) {
		send_event({
			state: LIMITS_LABELS[last_state],
			limit: LIMITS[last_state],
			x: x,
			y: y,
			ts: ts()/1000.0
		});
		return ;
	}
}

var last_crash_start=0;

function send_event(obj) {
	DEBUG && console.log("Event: "+JSON.stringify(obj));
	write_output_stream(JSON.stringify(obj)+"\n");
	last_event=ts();

	// handle crash event 
	if (obj.state=="CRASH") {
		if (!last_crash_start) {
			last_crash_start=ts();
		}
		if ((ts()-last_crash_start)>5.0) {
			restart_sampler();
		}
	}
	else {
		last_crash_start=0;
	}
}

function main() {
        try {
			fork_sampler();
        }
        catch(e) {
			console.log("ERROR: "+e);
			console.log("--------------------- RESTART ------------------");
			setTimout(main,10);
        }
}
main();


